{
  "name": "Full Stack Bangumi Download Manager Rules",
  "description": "Comprehensive rules for developing a high-quality anime download manager with Vue 3 frontend and Rust backend",
  "patterns": ["**/*.{rs,vue,ts,js}"],
  "rules": [
    "你是一位全栈工程师，精通 Rust 和 Vue 3，需要写出高效、安全、可维护的代码。",

    "后端技术栈 (Rust)：",
    "- 使用 tokio 作为异步运行时，正确处理异步任务的生命周期",
    "- 使用 sea-orm + SQLite 作为数据存储方案",
    "- 使用 anyhow 和 thiserror 进行错误处理",
    "- 使用 tracing 进行结构化日志记录",
    "- 使用 serde 处理序列化/反序列化",
    "- 使用 tokio channels 处理异步通信",

    "前端技术栈 (Vue 3)：",
    "- 使用 Vue 3 + TypeScript + Composition API",
    "- 使用 Vuetify 3 作为 UI 框架",
    "- 使用 Vite 作为构建工具",
    "- 使用 Vue Router 处理路由",
    "- 使用 unplugin-vue-components 和 unplugin-vue-router",
    "- 使用 Axios 处理 HTTP 请求",
    "- 使用 WebSocket 实现实时通信",

    "架构设计原则：",
    "- 遵循 SOLID 原则，特别是单一职责和依赖倒置",
    "- 前后端分离，通过 RESTful API 和 WebSocket 通信",
    "- 使用 Worker 模式处理后台任务",
    "- 状态管理清晰，使用枚举定义状态",
    "- 错误处理完善，提供清晰的错误信息",
    "- 支持优雅停机和资源清理",

    "后端编码规范：",
    "- 异步代码正确处理 Send + Sync 约束",
    "- 使用 Arc 和 RwLock 处理共享状态",
    "- 实现优雅的错误传播和处理",
    "- 合理使用并发原语，避免死锁",
    "- 注意资源的生命周期管理",
    "- 实现合理的重试机制",
    "- 提供详细的日志记录",

    "前端编码规范：",
    "- 使用 <script setup> 语法组织组件代码",
    "- 组件使用 PascalCase 命名",
    "- Props 和事件使用 camelCase",
    "- 样式使用 scoped CSS",
    "- 实现响应式设计",
    "- 支持暗色主题",
    "- 使用 TypeScript 类型定义",

    "性能优化准则：",
    "后端：",
    "- 避免不必要的内存分配和拷贝",
    "- 合理使用连接池和缓存",
    "- 优化异步任务调度",
    "- 使用 Arc 避免过度克隆",
    "前端：",
    "- 组件懒加载",
    "- 合理使用 computed 和 watch",
    "- 使用 v-show 替代频繁的 v-if",
    "- 长列表使用虚拟滚动",
    "- 图片懒加载",

    "错误处理规范：",
    "后端：",
    "- 使用 thiserror 定义错误类型",
    "- 提供详细的错误上下文",
    "- 实现错误重试机制",
    "- 记录错误日志",
    "前端：",
    "- 统一的错误处理中间件",
    "- 友好的错误提示界面",
    "- API 调用错误处理",
    "- WebSocket 断线重连",

    "测试规范：",
    "后端：",
    "- 编写单元测试和集成测试",
    "- 测试并发场景",
    "- 使用 mock 测试外部依赖",
    "前端：",
    "- 组件单元测试",
    "- E2E 测试关键流程",
    "- 测试错误处理",

    "安全性规范：",
    "- 输入验证和清理",
    "- 安全的文件操作",
    "- 敏感信息保护",
    "- API 访问控制",
    "- WebSocket 安全",

    "项目特定功能规范：",
    "- Worker 处理下载任务",
    "- 状态管理和转换",
    "- 文件名解析规则",
    "- 下载进度展示",
    "- 实时日志查看",
    "- 任务管理界面",
    "- 配置管理功能",

    "代码组织：",
    "后端：",
    "- 模块划分清晰",
    "- 使用 trait 定义接口",
    "- 提供完整文档注释",
    "前端：",
    "- 组件目录结构合理",
    "- API 接口统一管理",
    "- 类型定义集中管理",
    "- 样式文件模块化"
  ]
}
