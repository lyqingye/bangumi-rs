//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use super::sea_orm_active_enums::BgmKind;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "bangumi")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub name: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub description: Option<String>,
    #[sea_orm(unique)]
    pub bangumi_tv_id: Option<i32>,
    #[sea_orm(unique)]
    pub tmdb_id: Option<u64>,
    #[sea_orm(unique)]
    pub mikan_id: Option<i32>,
    pub air_date: Option<DateTime>,
    pub air_week: Option<i32>,
    #[sea_orm(column_type = "Double", nullable)]
    pub rating: Option<f64>,
    pub created_at: DateTime,
    pub updated_at: DateTime,
    pub poster_image_url: Option<String>,
    pub backdrop_image_url: Option<String>,
    pub season_number: Option<u64>,
    pub ep_count: i32,
    pub ep_start_number: i32,
    pub calendar_season: Option<String>,
    pub bgm_kind: Option<BgmKind>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::episode_download_tasks::Entity")]
    EpisodeDownloadTasks,
    #[sea_orm(has_many = "super::episodes::Entity")]
    Episodes,
    #[sea_orm(has_one = "super::subscriptions::Entity")]
    Subscriptions,
    #[sea_orm(has_many = "super::torrents::Entity")]
    Torrents,
}

impl Related<super::episode_download_tasks::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::EpisodeDownloadTasks.def()
    }
}

impl Related<super::episodes::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Episodes.def()
    }
}

impl Related<super::subscriptions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Subscriptions.def()
    }
}

impl Related<super::torrents::Entity> for Entity {
    fn to() -> RelationDef {
        super::episode_download_tasks::Relation::Torrents.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::episode_download_tasks::Relation::Bangumi.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
