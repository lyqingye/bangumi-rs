//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use super::sea_orm_active_enums::SubscribeStatus;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "subscriptions")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub bangumi_id: i32,
    pub subscribe_status: SubscribeStatus,
    pub start_episode_number: Option<i32>,
    pub resolution_filter: Option<String>,
    pub language_filter: Option<String>,
    pub release_group_filter: Option<String>,
    pub created_at: DateTime,
    pub updated_at: DateTime,
    pub collector_interval: Option<i32>,
    pub metadata_interval: Option<i32>,
    pub task_processor_interval: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::bangumi::Entity",
        from = "Column::BangumiId",
        to = "super::bangumi::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Bangumi,
}

impl Related<super::bangumi::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Bangumi.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
