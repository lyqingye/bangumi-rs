//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "torrents")]
pub struct Model {
    pub bangumi_id: i32,
    pub title: String,
    pub size: i64,
    #[sea_orm(primary_key, auto_increment = false, unique)]
    pub info_hash: String,
    #[sea_orm(column_type = "Text")]
    pub magnet: String,
    #[sea_orm(column_type = "Binary(255)", nullable)]
    pub data: Option<Vec<u8>>,
    pub pub_date: DateTime,
    pub download_url: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::bangumi::Entity",
        from = "Column::BangumiId",
        to = "super::bangumi::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Bangumi,
    #[sea_orm(has_many = "super::episode_download_tasks::Entity")]
    EpisodeDownloadTasks,
}

impl Related<super::episode_download_tasks::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::EpisodeDownloadTasks.def()
    }
}

impl Related<super::bangumi::Entity> for Entity {
    fn to() -> RelationDef {
        super::episode_download_tasks::Relation::Bangumi.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::episode_download_tasks::Relation::Torrents
                .def()
                .rev(),
        )
    }
}

impl ActiveModelBehavior for ActiveModel {}
