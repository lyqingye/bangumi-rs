//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use super::sea_orm_active_enums::State;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "episode_download_tasks")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub bangumi_id: i32,
    #[sea_orm(primary_key, auto_increment = false)]
    pub episode_number: i32,
    pub state: State,
    pub ref_torrent_info_hash: Option<String>,
    pub created_at: DateTime,
    pub updated_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::bangumi::Entity",
        from = "Column::BangumiId",
        to = "super::bangumi::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Bangumi,
    #[sea_orm(
        belongs_to = "super::torrent_download_tasks::Entity",
        from = "Column::RefTorrentInfoHash",
        to = "super::torrent_download_tasks::Column::InfoHash",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    TorrentDownloadTasks,
    #[sea_orm(
        belongs_to = "super::torrents::Entity",
        from = "Column::RefTorrentInfoHash",
        to = "super::torrents::Column::InfoHash",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Torrents,
}

impl Related<super::bangumi::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Bangumi.def()
    }
}

impl Related<super::torrent_download_tasks::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TorrentDownloadTasks.def()
    }
}

impl Related<super::torrents::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Torrents.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
