name: Release Backend

on:
  workflow_call:
    inputs:
      version:
        description: "发布版本号"
        required: true
        type: string
      upload_url:
        description: "Release 上传 URL"
        required: true
        type: string
      target:
        description: "构建目标平台"
        required: true
        type: string
      name:
        description: "构建产物名称"
        required: true
        type: string
    secrets:
      RELEASE_TOKEN:
        required: true

jobs:
  build:
    name: Build ${{ inputs.name }}
    runs-on: ${{ inputs.target == 'aarch64-unknown-linux-gnu' && 'ubuntu-latest' || contains(inputs.target, 'apple-darwin') && 'macos-latest' || 'ubuntu-latest' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.version }}
          token: ${{ secrets.RELEASE_TOKEN }}

      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            pkg-config \
            libssl-dev \
            build-essential \
            gcc-aarch64-linux-gnu \
            g++-aarch64-linux-gnu

      - name: Install macOS dependencies
        if: runner.os == 'macOS'
        run: |
          brew install \
            pkg-config \
            openssl@3

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ inputs.target }}

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ inputs.target }}

      - name: Set environment variables
        run: |
          if [ "${{ runner.os }}" = "macOS" ]; then
            echo "OPENSSL_ROOT_DIR=$(brew --prefix openssl@3)" >> $GITHUB_ENV
            echo "OPENSSL_LIB_DIR=$(brew --prefix openssl@3)/lib" >> $GITHUB_ENV
            echo "OPENSSL_INCLUDE_DIR=$(brew --prefix openssl@3)/include" >> $GITHUB_ENV
          fi

          if [ "${{ inputs.target }}" = "aarch64-unknown-linux-gnu" ]; then
            echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
            echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
            echo "CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++" >> $GITHUB_ENV
          fi

      - name: Build binary
        run: |
          cargo build --release --target ${{ inputs.target }}

          cd target/${{ inputs.target }}/release
          tar -czf ../../../bangumi-${{ inputs.name }}.tar.gz bangumi
          cd ../../..

          echo "SHA256 checksum:"
          shasum -a 256 bangumi-${{ inputs.name }}.tar.gz

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        with:
          upload_url: ${{ inputs.upload_url }}
          asset_path: ./bangumi-${{ inputs.name }}.tar.gz
          asset_name: bangumi-${{ inputs.name }}.tar.gz
          asset_content_type: application/gzip

