name: Docker

on:
  push:
    branches: ["master"]
    tags:
      - "v*.*.*"
    paths:
      - "crates/**"
      - "libs/**"
      - "web/**"
      - "develop/migrations/**"
      - "Cargo.toml"
      - "Cargo.lock"
      - "crates/cli-app/Dockerfile"
      - "web/Dockerfile"
  workflow_dispatch:
    inputs:
      version:
        description: "版本号 (例如: v1.0.0)"
        required: false
        type: string
        default: "test"

env:
  REGISTRY: ghcr.io
  BACKEND_IMAGE_NAME: ${{ github.repository }}/backend
  FRONTEND_IMAGE_NAME: ${{ github.repository }}/frontend

jobs:
  # 后端镜像构建任务
  backend-build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
    steps:
      - name: 准备
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: 设置 QEMU
        uses: docker/setup-qemu-action@v3

      - name: 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 登录到 Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 提取 Backend 元数据
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}
          tags: |
            # 如果是手动触发并指定了版本
            type=raw,value=${{ inputs.version }},enable=${{ github.event_name == 'workflow_dispatch' && inputs.version != 'latest' }}
            # 如果是推送到 master，使用 latest
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/master' }}
            # 从 git tag 生成版本标签，自动去除v前缀
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
          labels: |
            org.opencontainers.image.title=Bangumi Backend
            org.opencontainers.image.description=Bangumi Download Manager Backend Service
            org.opencontainers.image.vendor=lyqingye
            maintainer=lyqingye
            org.opencontainers.image.created={{date 'YYYY-MM-DDTHH:mm:ssZ'}}

      - name: 构建并按摘要推送 Backend 镜像
        id: build-backend
        uses: docker/build-push-action@v5
        with:
          context: .
          file: crates/cli-app/Dockerfile
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          outputs: type=image,push-by-digest=true,name-canonical=true,push=true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 导出摘要
        run: |
          mkdir -p ${{ runner.temp }}/backend-digests
          digest="${{ steps.build-backend.outputs.digest }}"
          touch "${{ runner.temp }}/backend-digests/${digest#sha256:}"

      - name: 上传摘要
        uses: actions/upload-artifact@v4
        with:
          name: backend-digests-${{ env.PLATFORM_PAIR }}
          path: ${{ runner.temp }}/backend-digests/*
          if-no-files-found: error
          retention-days: 1

  # 前端镜像构建任务
  frontend-build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
    steps:
      - name: 准备
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: 设置 QEMU
        uses: docker/setup-qemu-action@v3

      - name: 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 登录到 Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 提取 Frontend 元数据
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}
          tags: |
            # 如果是手动触发并指定了版本
            type=raw,value=${{ inputs.version }},enable=${{ github.event_name == 'workflow_dispatch' && inputs.version != 'latest' }}
            # 如果是推送到 master，使用 latest
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/master' }}
            # 从 git tag 生成版本标签，自动去除v前缀
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
          labels: |
            org.opencontainers.image.title=Bangumi Frontend
            org.opencontainers.image.description=Bangumi Download Manager Frontend Service
            org.opencontainers.image.vendor=lyqingye
            maintainer=lyqingye
            org.opencontainers.image.created={{date 'YYYY-MM-DDTHH:mm:ssZ'}}

      - name: 构建并按摘要推送 Frontend 镜像
        id: build-frontend
        uses: docker/build-push-action@v5
        with:
          context: web
          file: web/Dockerfile
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          outputs: type=image,push-by-digest=true,name-canonical=true,push=true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 导出摘要
        run: |
          mkdir -p ${{ runner.temp }}/frontend-digests
          digest="${{ steps.build-frontend.outputs.digest }}"
          touch "${{ runner.temp }}/frontend-digests/${digest#sha256:}"

      - name: 上传摘要
        uses: actions/upload-artifact@v4
        with:
          name: frontend-digests-${{ env.PLATFORM_PAIR }}
          path: ${{ runner.temp }}/frontend-digests/*
          if-no-files-found: error
          retention-days: 1

  # 后端镜像合并任务
  backend-merge:
    runs-on: ubuntu-latest
    needs:
      - backend-build
    steps:
      - name: 下载摘要
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/backend-digests
          pattern: backend-digests-*
          merge-multiple: true

      - name: 登录到 Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 创建并推送后端镜像清单列表
        run: |
          docker buildx imagetools create \
            $(for tag in latest $(if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ inputs.version }}" != "latest" ]; then echo "${{ inputs.version }}"; fi) $(if [[ "${{ github.ref }}" == refs/tags/v* ]]; then echo "${GITHUB_REF#refs/tags/v}"; echo "${GITHUB_REF#refs/tags/v}" | cut -d. -f1,2; fi); do \
              echo "-t ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:$tag"; \
            done) \
            $(printf '${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}@sha256:%s ' $(cd ${{ runner.temp }}/backend-digests && ls))

      - name: 查看后端镜像信息
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:latest

  # 前端镜像合并任务
  frontend-merge:
    runs-on: ubuntu-latest
    needs:
      - frontend-build
    steps:
      - name: 下载摘要
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/frontend-digests
          pattern: frontend-digests-*
          merge-multiple: true

      - name: 登录到 Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 创建并推送前端镜像清单列表
        run: |
          docker buildx imagetools create \
            $(for tag in latest $(if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ inputs.version }}" != "latest" ]; then echo "${{ inputs.version }}"; fi) $(if [[ "${{ github.ref }}" == refs/tags/v* ]]; then echo "${GITHUB_REF#refs/tags/v}"; echo "${GITHUB_REF#refs/tags/v}" | cut -d. -f1,2; fi); do \
              echo "-t ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:$tag"; \
            done) \
            $(printf '${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}@sha256:%s ' $(cd ${{ runner.temp }}/frontend-digests && ls))

      - name: 查看前端镜像信息
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:latest

