name: Release

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write
  packages: write

jobs:
  build-backend:
    name: Build Backend
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: bangumi-linux
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: bangumi-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: bangumi-macos-arm64

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install system dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev make gcc g++ protobuf-compiler

      - name: Install system dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install openssl pkg-config

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: "crates/cli-app -> target"
          cache-on-failure: true

      - name: Build Binary
        run: |
          # 显示工作空间信息
          cargo metadata --format-version=1 --no-deps
          # 构建指定包
          cargo build --release -p cli-app --target ${{ matrix.target }}
          # 显示构建结果
          ls -la target/${{ matrix.target }}/release/
        env:
          OPENSSL_DIR: ${{ matrix.os == 'macos-latest' && '/usr/local/opt/openssl@3' || '/usr' }}
          OPENSSL_LIB_DIR: ${{ matrix.os == 'ubuntu-latest' && '/usr/lib/x86_64-linux-gnu' || '' }}
          OPENSSL_INCLUDE_DIR: ${{ matrix.os == 'ubuntu-latest' && '/usr/include' || '' }}
          MACOSX_DEPLOYMENT_TARGET: "10.15"

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: target/${{ matrix.target }}/release/bangumi
          if-no-files-found: error
          retention-days: 5

  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: "web/package-lock.json"

      - name: Install Dependencies
        working-directory: ./web
        run: npm ci

      - name: Build Frontend
        working-directory: ./web
        run: npm run build

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: web/dist
          if-no-files-found: error
          retention-days: 5

  create-release:
    name: Create Release
    needs: [build-backend, build-frontend]
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 获取完整历史用于生成changelog
          submodules: recursive

      - name: Generate Changelog
        id: changelog
        uses: orhun/git-cliff-action@v2
        with:
          config: cliff.toml
          args: --latest --strip header
        continue-on-error: true # 即使生成changelog失败也继续执行

      - name: Download All Artifacts
        uses: actions/download-artifact@v4

      - name: Prepare Release Files
        run: |
          set -e  # 遇到错误立即退出

          # 显示下载的构建产物结构
          echo "显示下载的构建产物结构："
          find . -type f -name "bangumi*" | sort
          ls -la

          # 创建临时目录用于存放最终文件
          mkdir -p temp_release_files

          # 确保二进制文件可执行
          chmod +x bangumi-linux/bangumi bangumi-macos-x86_64/bangumi bangumi-macos-arm64/bangumi

          # 复制二进制文件到临时目录并重命名
          echo "复制 Linux 二进制文件..."
          cp -v bangumi-linux/bangumi temp_release_files/bangumi-linux-x86_64

          echo "复制 macOS x86_64 二进制文件..."
          cp -v bangumi-macos-x86_64/bangumi temp_release_files/bangumi-macos-x86_64

          echo "复制 macOS ARM64 二进制文件..."
          cp -v bangumi-macos-arm64/bangumi temp_release_files/bangumi-macos-arm64

          # 压缩前端文件
          echo "压缩前端文件..."
          (cd frontend-dist && zip -r ../temp_release_files/frontend-dist.zip .)

          # 移动到临时目录
          cd temp_release_files

          # 显示最终文件
          echo "最终文件列表："
          ls -la

          # 为每个文件生成单独的 SHA256 校验和
          echo "生成 SHA256 校验和..."
          for file in bangumi-linux-x86_64 bangumi-macos-x86_64 bangumi-macos-arm64 frontend-dist.zip; do
            sha256sum "$file" > "$file.sha256"
            echo "已生成 $file.sha256:"
            cat "$file.sha256"
          done

          # 移动回工作目录
          cd ..

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            temp_release_files/bangumi-linux-x86_64
            temp_release_files/bangumi-linux-x86_64.sha256
            temp_release_files/bangumi-macos-x86_64
            temp_release_files/bangumi-macos-x86_64.sha256
            temp_release_files/bangumi-macos-arm64
            temp_release_files/bangumi-macos-arm64.sha256
            temp_release_files/frontend-dist.zip
            temp_release_files/frontend-dist.zip.sha256
          body: |
            ## ChangeLog
            ${{ steps.changelog.outputs.content || '* No ChangeLog' }}
          draft: false
          prerelease: ${{ contains(github.ref, '-rc') || contains(github.ref, '-beta') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

