name: Create Release PR

on:
  push:
    tags:
      - "v*"

jobs:
  create-release-pr:
    runs-on: ubuntu-latest
    outputs:
      pr_number: ${{ steps.create_pr.outputs.pr_number }}
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install conventional-changelog-cli
        run: npm install -g conventional-changelog-cli

      - name: Generate Changelog
        run: |
          # 获取最新的两个 tag
          LATEST_TAG=$(git describe --tags --abbrev=0)
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 `git rev-list --tags --skip=1 --max-count=1`)

          # 生成从上一个版本到现在的 changelog
          conventional-changelog -p angular -r 2 > CHANGELOG.md

      - name: Create Release PR
        id: create_pr
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION=${GITHUB_REF#refs/tags/}

          # 创建新的分支
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git checkout -b release/$VERSION

          # 提交 changelog
          git add CHANGELOG.md
          git commit -m "chore: update changelog for $VERSION"
          git push origin release/$VERSION

          # 创建 PR 并获取 PR 号
          PR_URL=$(gh pr create \
            --title "Release $VERSION" \
            --body "## Changelog for $VERSION
          $(cat CHANGELOG.md)" \
            --base master \
            --head release/$VERSION \
            --label "release")

          PR_NUMBER=$(echo $PR_URL | rev | cut -d'/' -f1 | rev)
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT

  wait-for-pr:
    needs: create-release-pr
    runs-on: ubuntu-latest
    outputs:
      merged: ${{ steps.check_pr.outputs.merged }}
    steps:
      - name: Check PR status
        id: check_pr
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
          PR_NUMBER: ${{ needs.create-release-pr.outputs.pr_number }}
        run: |
          # 检查 PR 状态，最多等待 30 分钟
          for i in {1..30}; do
            PR_STATE=$(gh pr view $PR_NUMBER --json state,mergedAt -q '.state')
            if [ "$PR_STATE" = "MERGED" ]; then
              echo "merged=true" >> $GITHUB_OUTPUT
              exit 0
            fi
            if [ "$PR_STATE" = "CLOSED" ]; then
              echo "PR was closed without merging"
              exit 1
            fi
            echo "Waiting for PR to be merged... Attempt $i/30"
            sleep 60
          done
          echo "Timeout waiting for PR to be merged"
          exit 1

  release:
    needs: [create-release-pr, wait-for-pr]
    if: needs.wait-for-pr.outputs.merged == 'true'
    uses: ./.github/workflows/release.yml
    with:
      version: ${{ github.ref_name }}
    secrets:
      RELEASE_TOKEN: ${{ secrets.RELEASE_TOKEN }}

