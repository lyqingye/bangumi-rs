name: Create Release PR

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write
  pull-requests: write

jobs:
  create-release-pr:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      pr_number: ${{ steps.create_pr.outputs.pr_number }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.RELEASE_TOKEN }}

      - name: Get version
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Generate Changelog
        run: |
          # 获取上一个版本标签
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

          if [ -z "$PREV_TAG" ]; then
            # 如果没有前一个标签，获取所有提交
            git log --pretty=format:"* %s (%h)" > CHANGELOG.md
          else
            # 获取从上一个标签到现在的提交
            git log ${PREV_TAG}..HEAD --pretty=format:"* %s (%h)" > CHANGELOG.md
          fi

      - name: Create Pull Request
        id: create_pr
        env:
          GH_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        run: |
          # 创建发布分支
          BRANCH="release/${VERSION}"
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

          # 删除本地分支（如果存在）
          git branch -D ${BRANCH} 2>/dev/null || true

          # 删除远程分支（如果存在）
          git push origin --delete ${BRANCH} 2>/dev/null || true

          # 确保清理远程分支的缓存
          git fetch origin --prune

          # 创建新的分支
          git checkout -b ${BRANCH}

          # 提交 changelog
          git add CHANGELOG.md
          git commit -m "chore: update changelog for ${VERSION}"
          git push -f origin ${BRANCH}

          # 创建 PR
          PR_URL=$(gh pr create \
            --title "Release ${VERSION}" \
            --body "## Changelog for ${VERSION}
          $(cat CHANGELOG.md)

          This PR was automatically generated by GitHub Actions." \
            --base main \
            --head ${BRANCH})

          PR_NUMBER=$(echo $PR_URL | awk -F/ '{print $NF}')
          echo "pr_number=${PR_NUMBER}" >> $GITHUB_OUTPUT

  wait-for-pr:
    needs: create-release-pr
    runs-on: ubuntu-latest
    outputs:
      merged: ${{ steps.check_pr.outputs.merged }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.RELEASE_TOKEN }}

      - name: Wait for PR merge
        id: check_pr
        env:
          GH_TOKEN: ${{ secrets.RELEASE_TOKEN }}
          PR_NUMBER: ${{ needs.create-release-pr.outputs.pr_number }}
        run: |
          MAX_ATTEMPTS=30
          ATTEMPT=1

          while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
            PR_STATE=$(gh pr view $PR_NUMBER --json state,mergedAt -q '.state')
            
            if [ "$PR_STATE" = "MERGED" ]; then
              echo "merged=true" >> $GITHUB_OUTPUT
              exit 0
            elif [ "$PR_STATE" = "CLOSED" ]; then
              echo "PR was closed without merging"
              exit 1
            fi
            
            echo "Waiting for PR to be merged... Attempt $ATTEMPT/$MAX_ATTEMPTS"
            ATTEMPT=$((ATTEMPT + 1))
            sleep 60
          done

          echo "Timeout waiting for PR to be merged"
          exit 1

  trigger-release:
    needs: [create-release-pr, wait-for-pr]
    if: needs.wait-for-pr.outputs.merged == 'true'
    uses: ./.github/workflows/release.yml
    with:
      version: ${{ needs.create-release-pr.outputs.version }}
    secrets:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

